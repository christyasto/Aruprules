using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Excel = Microsoft.Office.Interop.Excel;

namespace ConsoleApplication1
{
    class Rulebook
    {
        public static string CheckRebarArea()
        {
            double f_ck = Convert.ToDouble("50");  //------------------------------------------Change f_ck into from Excel

            List<string> fortesting = new List<string>();
            if (f_ck > 50) { return "The variable f_ck should not exceed 50 MPa. Please check your setting!"; }
            else {
                int rowNumLo = 4;     //------------------------------------------------------Change this into rowNum required
                int LastRow = 4;    //------------------------------------------------------Change this into rowNum required
                for (int RowNum = rowNumLo; RowNum <= LastRow; RowNum++)
                {
                    int colNumLo = 28; //---------------------------------------------------Change this into colNum required
                    int colNumHi = 28; //---------------------------------------------------Change this into colNum required
                    for (int colNum = colNumLo; colNum <= colNumHi; colNum++)
                    {
                        string beamType = "L_End (R)";    //-----------------------------------------Change this into beamType in excel
                        if (Sources.GetDefinition(beamType, colNum) == "1")
                        {
                            string userDefinedSectionSize = "2000/1500 x 300"; //------------------Change this into userDefine in excel
                            double beamDepth = Sources.GetBeamDepth(userDefinedSectionSize);
                            double beamWidth = Sources.GetBeamWidth(userDefinedSectionSize);
                            double A_c = beamDepth * beamWidth;
                            double A_min = Sources.GetMinRebarArea(A_c);

                            string cellToCheck = "1"; //----------------------------------------need fix to check if "1" in excel (should be range)
                            if (cellToCheck.All(char.IsDigit))
                            {
                                if (Int32.Parse(cellToCheck) < A_min)
                                {
                                    fortesting.Add("Rule 3: Should exceed min. rebar area."); //--change into append comment in excel
                                }
                            }
                        }
                    }
                }
                return fortesting[0];
            }
        }
        public static string CheckRequiredFields()
        {
            int rowNumLo = 4;     //------------------------------------------------------Change this into rowNum required
            int LastRow = 4;    //------------------------------------------------------Change this into rowNum required

            for (int rowNum = rowNumLo; rowNum <= LastRow; rowNum++)
            {
                string beamType = "L_End (R)";    //-----------------------------------------Change this into beamType in excel

                int colNumLo = 10;      //--------------------------------------------------change into colNum requred
                int colNumHi = 10;      //--------------------------------------------------change into colNum requred
                for (int colNum = colNumLo; colNum <= colNumHi; colNum++)
                {
                    string cellToCheck = "-"; //----------------------------------------need fix to check if "1" in excel (should be range)
                    if (Sources.GetDefinition(beamType, colNum) == "1")
                    {
                        if (cellToCheck.Length == 0 || cellToCheck == "-")
                        {
                            return "Rule 1: Required field."; //-------------------------------------Change into comment on Excel
                        }
                    }
                    else if (Sources.GetDefinition(beamType, colNum) == "2")
                    {
                        return null;
                    }
                    else {
                        if (cellToCheck.Length != 0 && cellToCheck != "-")
                        {
                            return "Rule 1: Should be an empty field."; //------------------------------Change into comment in Excel
                        }
                    }
                }
            }

            return null;
        }

        public static string CheckConsistencyWithRevit()
        {
            int rowNumLo = 4;     //------------------------------------------------------Change this into rowNum required
            int LastRow = 4;    //--------------------------------------------------------Change this into rowNum required
            for (int rowNum = rowNumLo; rowNum <= LastRow; rowNum++)
            {
                string revitSectionSize = "1500 x 300";         //--------------------------Change into check beamSize in excel
                string userDefinedSectionSize = "150 x 300";   //--------------------------Change into check UserDefined in excel

                if (revitSectionSize != userDefinedSectionSize)
                {
                    return "Rule 2: Inconsistent section sizes."; //--------------------------Change into comment on both cells in excel
                }
            }
            return null;
        }
    }
}
